import SwiftUI
import ComposableArchitecture
import PrimeModal

public struct CounterViewState {
    public var nthPrime: NthPrimeState?
    public var count: Int
    public var favoritePrimes: [Int]
    public var isNthPrimeButtonDisable: Bool

    public init(
        nthPrime: NthPrimeState? = nil,
        count: Int,
        favoritePrimes: [Int],
        isNthPrimeButtonDisable: Bool
    ) {
        self.nthPrime = nthPrime
        self.count = count
        self.favoritePrimes = favoritePrimes
        self.isNthPrimeButtonDisable = isNthPrimeButtonDisable
    }

    var counter: CounterState {
        get {
            CounterState(
                nthPrime: nthPrime,
                count: count,
                isNthPrimeButtonDisable: isNthPrimeButtonDisable
            )
        }
        set {
            nthPrime = newValue.nthPrime
            count = newValue.count
            isNthPrimeButtonDisable = newValue.isNthPrimeButtonDisable
        }
    }

    var primeModal: PrimeModalState {
        get {
            PrimeModalState(
                prime: count,
                favoritePrimes: favoritePrimes
            )
        }
        set {
            count = newValue.prime
            favoritePrimes = newValue.favoritePrimes
        }
    }
}

public enum CounterViewAction {
    case counter(CounterAction)
    case primeModal(PrimeModalAction)

    // Generated by script
    var counter: CounterAction? {
        get {
            guard case let .counter(value) = self else { return nil }
            return value
        }
        set {
            guard case .counter = self, let newValue = newValue else { return }
            self = .counter(newValue)
        }
    }

    // Generated by script
    var primeModel: PrimeModalAction? {
        get {
            guard case let .primeModal(value) = self else { return nil }
            return value
        }
        set {
            guard case .primeModal = self, let newValue = newValue else { return }
            self = .primeModal(newValue)
        }
    }
}

public struct CounterView: View {
    @ObservedObject private var store: Store<CounterViewState, CounterViewAction>
    @State private var isPrimeModalShown: Bool = false

    public init(store: Store<CounterViewState, CounterViewAction>) {
        self.store = store
    }

    public var body: some View {
        VStack {
            HStack {
                Button(
                    action: { store.send(.counter(.decrementTapped)) },
                    label: { Text("-") }
                )

                Text("\(store.value.count)")

                Button(
                    action: { store.send(.counter(.incrementTapped)) },
                    label: { Text("+") }
                )
            }

            Button(
                action: { isPrimeModalShown = true },
                label: { Text("Is this prime?") }
            )

            Button(
                action: nthPrimeButtonAction,
                label: { Text("What is the \(ordinal(store.value.count)) prime?") }
            )
            .disabled(store.value.isNthPrimeButtonDisable)
        }
        .font(.title)
        .navigationTitle("Counter Demo")
        .sheet(isPresented: $isPrimeModalShown, content: {
            IsPrimeModalView(
                store: store.view(
                    value: {
                        PrimeModalState(
                            prime: $0.count,
                            favoritePrimes: $0.favoritePrimes
                        )
                    },
                    action: { .primeModal($0) }
                )
            )
        })
        .alert("Nth Prime",
               isPresented: .constant(store.value.nthPrime != nil),
               presenting: store.value.nthPrime,
               actions: { _ in
            Button(
                action: { store.send(.counter(.nthPrimeDismissed)) },
                label: { Text("OK")  })

        }, message: { alert in
            Text("Value of \(alert.prime)th prime is: \(alert.result)")
        })
    }

    func nthPrimeButtonAction() {
        self.store.send(.counter(.nthPrimeButtonTapped))
    }
}

func ordinal(_ n: Int) -> String {
    let formatter = NumberFormatter()
    formatter.numberStyle = .ordinal
    return formatter.string(for: n) ?? ""
}

//#Preview {
//    let store = Store<AppState, AppAction>(
//        initialValue: AppState(),
//        reducer: AppStateReducerComposer.reduce
//    )
//
//    return CounterView(
//        store: store.view(
//            value: { ($0.count, $0.favoritePrimes) },
//            action: { $0 }
//        )
//    )
//}
